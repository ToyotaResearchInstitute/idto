##
#
# This file contains parameters defining the spinner optimization problem.
#
##

# Initial state, ordered by [finger 1, finger 2, spinner]
q_init : [0.3, 1.5, 0.0]
v_init : [0.0, 0.0, 0.0]

q_min : [-1, -1, -1]
q_max : [3, 3, 3]

# Target state
q_nom_start : [0.3, 1.5, 0.0]
q_nom_end : [0.3, 1.5, 2.0]
q_nom_relative_to_q_init : [false, false, true]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_guess : [0.3, 1.5, 0.0]

# Cost Weights. These define diagonal matrices, again with the ordering
# [finger 1, finger 2, spinner]
Qq : [1, 1, 1]  # Running cost
Qv : [0.1, 0.1, 0.1]
R : [0.1, 0.1, 1e3]
Qlq : [0, 0, 0.01] 

Qfq : [10, 10, 10]  # Terminal cost
Qfv : [0.1, 0.1, 0.1]

# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 40      # number of timesteps

# Solver parameters
max_iters : 200             # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
linesearch : "backtracking" # linesearch strategy, {armino, backtracking}
scaling : true
equality_constraints : true
num_threads : 4

tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

linear_solver : "pentadiagonal_lu"

Delta0 : 1e1      # initial trust region radius
Delta_max : 1e5    # maximum trust region radius

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : false

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
contact_stiffness : 200     # normal force stiffness, in N/m
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# Amount of smoothing (and therefore force at a distance) to apply when
# computing normal forces. This is equivalent to an analytical version of
# randomized smoothing, assuming that signed distances are drawn from a logistic
# distirbution with the smoothing factor as the scale parameter. Higher values
# mean more smoothing and more force at a distance. 
smoothing_factor : 0.01

# Friction
friction_coefficient : 0.5  # Coefficient of friction.
stiction_velocity: 0.05     # Regularization velocity, in m/s.

# MPC parameters
mpc : true
mpc_iters : 1
controller_frequency : 200.0
sim_time : 5
sim_time_step : 1e-3
sim_realtime_rate : 0.0
feed_forward : true
Kp : [10,10,0]
Kd : [1,1,0]
